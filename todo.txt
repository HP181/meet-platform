const { recordings } = await call.queryRecordings();

recordings Link
time from now


query calls
calls.queryRecordings();



const result = await call.queryTranscriptions

call.state.members









Hi!

I'm an AI assistant trained on documentation, help articles, and other content.

Ask me anything about Stream.

how to query video calls that has recordings in react
To query video calls that have recordings in React, you need to use the StreamVideoClient.queryCalls() method with appropriate filters and then retrieve recording data separately for each call1.

Here's how to query calls and check for recordings:

typescript
import { StreamVideoClient } from "@stream-io/video-react-sdk";

let client: StreamVideoClient;

const { calls } = await client.queryCalls({
  filter_conditions: { ...filters },
  sort: [...sortOptions],
  limit: 25,
  watch: true,
});
However, the Stream API doesn't provide a direct filter for calls with recordings. You'll need to query calls first and then check each call for recordings using the queryRecordings() method2:

typescript
// After getting calls, check each for recordings
const callsWithRecordings = [];

for (const call of calls) {
  const recordingsResponse = await call.queryRecordings();
  if (recordingsResponse.recordings && recordingsResponse.recordings.length > 0) {
    callsWithRecordings.push({
      call,
      recordings: recordingsResponse.recordings
    });
  }
}
The queryRecordings() method returns a ListRecordingsResponse that contains an array of CallRecording objects accessible through the recordings key. By default, it retrieves all call recordings for a given call, but you can also specify a callSessionId to get recordings from a specific session.

Note that call recordings may not be immediately available when recording stops - it can take 30 or more seconds for a recording to be available, which is indicated by the call.recording_ready event.

Sources
Querying Calls
Video and AudioReactGuides
Recording
Video and AudioReactAdvanced
how to query all members from that recordings call
To query all members from a call that has recordings, you can use the queryMembers() method on the call object. Here's how to do it:

typescript
const result = await call.queryMembers();
1

For more control over the query, you can use additional options:

typescript
// sorting and pagination
const queryMembersReq = {
  sort: [{ field: "user_id", direction: 1 }],
  limit: 2,
};
const result = await call.queryMembers(queryMembersReq);

// loading the next page
const result = await call.queryMembers({
  ...queryMembersReq,
  next: result.next,
});

// filtering
const result = await call.queryMembers({
  filter_conditions: { role: { $eq: "admin" } },
});
The queryMembers() method is useful because when you create or join a call, you only get a maximum of 100 members by default:

typescript
// The maximum limit is 100
// The default limit is 25
await call.getOrCreate({ members_limit: 100 });

// or
await call.join({ members_limit: 100 });
To get the complete list of call members, the Stream API allows you to query, filter and sort members using a paginated list through the queryMembers() method .

You can filter members by various fields including user_id, role, custom data, created_at, and updated_at .

Sources
Querying Call Members
Video and AudioReactGuides
so give me complete and optimized query for : 
1) query calls
2) get recording calls from query calls
3) query transcript (if available) only for above recording calls
4) query all members of recording calls
Here's a complete and optimized solution for your requirements using React:

typescript
import { StreamVideoClient } from "@stream-io/video-react-sdk";

let client: StreamVideoClient;

// 1. Query calls
const { calls } = await client.queryCalls({
  filter_conditions: { ...filters },
  sort: [...sortOptions],
  limit: 25,
  watch: true,
});
1

typescript
// 2. Get recording calls from query calls
const callsWithRecordings = [];

for (const call of calls) {
  const recordingsResponse = await call.queryRecordings();
  if (recordingsResponse.recordings && recordingsResponse.recordings.length > 0) {
    callsWithRecordings.push({
      call,
      recordings: recordingsResponse.recordings
    });
  }
}
2

typescript
// 4. Query all members of recording calls
const callsWithRecordingsAndMembers = [];

for (const callData of callsWithRecordings) {
  const membersResult = await callData.call.queryMembers();
  
  callsWithRecordingsAndMembers.push({
    call: callData.call,
    recordings: callData.recordings,
    members: membersResult.members
  });
}
3

Important Notes:

Recordings availability: Call recordings may not be immediately available when recording stops - it can take 30 or more seconds for a recording to be available, indicated by the call.recording_ready event 2

Members limit: When you create or join a call, you get a maximum of 100 members by default, so using queryMembers() ensures you get the complete list 3

Transcripts: I don't have information about querying transcripts in the available documentation sources. You may need to check the Stream documentation or contact support for transcript-specific APIs.

The queryRecordings() method returns a ListRecordingsResponse with an array of CallRecording objects accessible through the recordings key 2. The queryMembers() method allows you to query, filter and sort members using a paginated list 3.

Sources
Querying Calls
Video and AudioReactGuides
Recording
Video and AudioReactAdvanced
Querying Call Members
Video and AudioReactGuides
the transcription we can get from : 
1) query calls
2) await call.queryTranscriptions();

can we directly filter recording or transcription at query calls
Based on the available documentation, you cannot directly filter for calls with recordings or transcriptions at the query level 1.

The queryCalls() method supports filtering on these fields only :

| Field | Description |
| --- | --- |
| id | The id for this call |
| cid | The cid for this call. IE: default:123 |
| team | The team id for the call |
| type | The call type. Typically default, livestream etc... |
| created_by_user_id | The user id who created the call |
| created_at | When the call was created |
| updated_at | When the call was updated |
| ended_at | When the call ended |
| starts_at | When the call starts at |
| backstage | If the call is in backstage mode or not |
| members | Check if the call has these members listed |
| ongoing | Check if the call is ongoing or not |
| custom | You can query custom data using the "custom.myfield" syntax |

Here's the optimized complete solution with transcriptions:

typescript
import { StreamVideoClient } from "@stream-io/video-react-sdk";

let client: StreamVideoClient;

// 1. Query calls
const { calls } = await client.queryCalls({
  filter_conditions: { ...filters },
  sort: [...sortOptions],
  limit: 25,
  watch: true,
});
typescript
// 2 & 3. Get recording calls and transcriptions in parallel
const callsWithRecordingsAndTranscriptions = [];

for (const call of calls) {
  const [recordingsResponse, transcriptionsResponse] = await Promise.all([
    call.queryRecordings(),
    call.queryTranscriptions()
  ]);
  
  if (recordingsResponse.recordings && recordingsResponse.recordings.length > 0) {
    callsWithRecordingsAndTranscriptions.push({
      call,
      recordings: recordingsResponse.recordings,
      transcriptions: transcriptionsResponse.transcriptions || []
    });
  }
}
typescript
// 4. Query all members of recording calls
const finalResults = [];

for (const callData of callsWithRecordingsAndTranscriptions) {
  const membersResult = await callData.call.queryMembers();
  
  finalResults.push({
    call: callData.call,
    recordings: callData.recordings,
    transcriptions: callData.transcriptions,
    members: membersResult.members
  });
}
2

Since there's no direct filter for recordings or transcriptions, you must query calls first and then check each call individually for recordings and transcriptions 1.

Sources
Querying Calls
Video and AudioReactGuides
Calls
Video and AudioPlatformBasics
to query at query calls and as we can query custom : 
i have 
creator : object
description: string
participants: array

now can i query directly ?
Yes, you can query directly using custom fields! The documentation shows you can query custom data using the "custom.myfield" syntax1.

For your custom fields, you can query them like this:

typescript
import { StreamVideoClient } from "@stream-io/video-react-sdk";

let client: StreamVideoClient;

const { calls } = await client.queryCalls({
  filter_conditions: { "custom.color": "red" },
  limit: 10,
  watch: true,
});
For your specific custom fields (creator, description, participants), you can query them directly:

typescript
import { StreamVideoClient } from "@stream-io/video-react-sdk";

let client: StreamVideoClient;

// Query by description
const { calls } = await client.queryCalls({
  filter_conditions: { "custom.description": "your description" },
  limit: 10,
  watch: true,
});

// Query by creator (if it's a string field in the object)
const { calls } = await client.queryCalls({
  filter_conditions: { "custom.creator.id": "user123" },
  limit: 10,
  watch: true,
});

// Query by participants array
const { calls } = await client.queryCalls({
  filter_conditions: { "custom.participants": { $in: ["user123"] } },
  limit: 10,
  watch: true,
});
You can also combine multiple custom field filters with other built-in filters using logical operators:

typescript
const { calls } = await client.queryCalls({
  filter_conditions: {
    $and: [
      { "custom.description": { $exists: true } },
      { type: { $eq: "livestream" } },
      { "custom.participants": { $in: ["user123"] } }
    ]
  },
  limit: 10,
  watch: true,
});
This allows you to directly filter calls based on your custom fields without needing to query all calls first and then filter them manually.









